


Setting up the venv env for project:

[WINDOWS]
steps: 

Powershell commands:

1- Get-ExecutionPolicy
# Likely returns "Restricted" or "AllSigned"

2- # Temporarily allow script execution for the current session
Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass








Step 1: Create the Virtual Environment
You’ve already done this correctly:

powershell
Copy
& "$HOME\.pyenv\pyenv-win\versions\3.13.0\python.exe" -m venv myenv
Step 2: Activate the Virtual Environment
In PowerShell, use:

powershell
Copy
.\myenv\Scripts\Activate.ps1
(You missed this step earlier!)

Step 3: Verify Python Version Inside the Virtual Environment
powershell
Copy
python --version
# Should now show Python 3.13.0
Why This Happened
Without activation, the terminal uses the global Python (Anaconda 3.6.5).

The virtual environment’s Python is isolated and only active after running Activate.ps1.

Full Workflow Example
powershell
Copy
# 1. Create the venv with Python 3.13.0
& "$HOME\.pyenv\pyenv-win\versions\3.13.0\python.exe" -m venv myenv

# 2. Activate it
.\myenv\Scripts\Activate.ps1

# 3. Confirm Python version
python --version  # Should output "Python 3.13.0"
If It Still Shows 3.6.5
Fix 1: Ensure Correct Activation
Run Get-Command python after activation. It should point to myenv\Scripts\python.exe.

Fix 2: Check PATH Variable
After activation, your PATH should prioritize the venv’s Scripts folder:

powershell
Copy
$env:PATH -split ';' | Select-String 'myenv'
Fix 3: Reinstall the Virtual Environment
Delete the myenv folder and recreate it:

powershell
Copy
Remove-Item -Recurse -Force myenv
& "$HOME\.pyenv\pyenv-win\versions\3.13.0\python.exe" -m venv myenv
.\myenv\Scripts\Activate.ps1
python --version
Final Notes
Always activate the virtual environment before using it.

Anaconda’s Python won’t interfere once the venv is activated.
